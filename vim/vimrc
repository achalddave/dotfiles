" Notes                                                                     {{{
" vim: set foldmethod=marker:
"
" Folding method lifted from spf13.vim
"
" }}}

set encoding=utf-8
scriptencoding utf-8

" Tips                                                                      {{{
" ====
" * Overriding plugin mapping: use <buffer>
"   (e.g. `:imap <buffer> <BS> <nop>` instead of `:imap <BS> <nop>`)
"                                                                           }}}

" Basic                                                                     {{{
" I just don't want to deal with moving this right now to a proper section
set nocompatible
let mapleader=","
let maplocalleader=","

" Dotfiles can be anywhere, get correct location
let vimroot=getcwd()

"                                                                           }}}
let &rtp.=','.vimroot."/.vim"

" vim-plug + Plugins                                                        {{{
" ================
call plug#begin(vimroot."/.vim/plugged")

" Helper plugins
Plug 'xolox/vim-misc' " Required for vim-session
Plug 'google/maktaba' " Required for Google plugins
Plug 'google/glaive' " Required for Google plugins

Plug 'vim-scripts/Tab-Name'
Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-repeat'
Plug 'majutsushi/tagbar'
Plug 'achalddave/Smooth-Scroll'
Plug 'ervandew/supertab'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'suy/vim-ctrlp-commandline'
Plug 'vim-scripts/camelcasemotion'
Plug 'xolox/vim-session'
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
Plug 'int3/vim-extradite'
Plug 'gregsexton/gitv'
Plug 'vim-scripts/TagHighlight'
Plug 'docunext/closetag.vim'
Plug 'mbbill/undotree'
Plug 'jlanzarotta/bufexplorer'
Plug 'navicore/vissort.vim'
Plug 'junegunn/goyo.vim'
Plug 'google/vim-codefmt'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'Valloric/YouCompleteMe',
            \ {'do': './install.py --clang-completer',
            \ 'for': ['zsh', 'python', 'sh', 'bash', 'cpp', 'c', 'javascript']}
Plug 'achalddave/guifontpp.vim', { 'on': [] } " Only load if gui running
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'haya14busa/vim-asterisk'
Plug 'inside/vim-search-pulse'
Plug 'neomake/neomake'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Konfekt/FastFold'
Plug 'kopischke/vim-fetch'
Plug 'Yggdroot/indentLine'
Plug 'jremmen/vim-ripgrep'

" language specific
Plug 'lervag/vimtex'
Plug 'pangloss/vim-javascript'
Plug 'vim-scripts/mips.vim'
Plug 'othree/html5.vim'
Plug 'atdt/vim-mediawiki'
Plug 'groenewege/vim-less'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'rdark/Windows-PowerShell-Syntax-Plugin'
Plug 'vim-scripts/MatlabFilesEdition'
Plug 'JuliaLang/julia-vim'
Plug 'briancollins/vim-jst'
Plug 'rust-lang/rust.vim'
Plug 'uarun/vim-protobuf'
Plug 'tbastos/vim-lua'
Plug 'tmhedberg/SimpylFold'
Plug 'tweekmonster/braceless.vim'
Plug 'vim-python/python-syntax'
Plug 'lepture/vim-jinja'

" Themes
Plug 'nanotech/jellybeans.vim'
Plug 'achalddave/vim-tomorrow-theme'
Plug 'altercation/vim-colors-solarized'
Plug 'NLKNguyen/papercolor-theme'

call plug#end()
call glaive#Install() " Initialize Google plugins

"                                                                           }}}

" Plugin Settings                                                           {{{
" ===============

" Easy tagbar
nnoremap <F2> :TagbarOpen j<CR>
inoremap <F2> <Esc>:TagbarOpen j<CR>a

nnoremap <S-F2> :TagbarToggle<CR>
inoremap <S-F2> <Esc>:TagbarToggle<CR>a

" Undo tree
nnoremap <F5> :UndotreeToggle<CR>
inoremap <F5> <Esc>:UndotreeToggle<CR>a

" Super tab (<cr> map messes with my <cr> -> <c-g>u<cr> map)
let g:SuperTabCrMapping = 0

" indent-html.vim:
let g:html_indent_inctags='p' " add indent on new paragraph
" Looks like vim-ragtag sets these as of
" https://github.com/tpope/vim-ragtag/commit/7c7b2464731a5e10016595db4d6aa1428b828efe
" but this is to make it explicit (I don't understand why vim-ragtag would set
" things for me from indenthtml.vim...)
let g:html_indent_style1='inc'   " auto indent css after <style>
let g:html_indent_script1='inc'  " auto indent js after <script>

" Session save
let g:session_directory=vimroot."/sessions"
let g:session_command_aliases = 1
let g:session_autoload='no'
let g:session_autosave='no'

" Ctrl p
let g:ctrlp_max_files = 100000 " Set to 0 if no limit, but this should be enough.
let g:ctrlp_extensions = ['commandline'] " CtrlP through search history
" Remove <C-h> to left mapping
let g:ctrlp_prompt_mappings = {
            \ 'PrtCurLeft()': ['<left>', '<c-^>'],
            \ 'PrtBS()': ['<c-h>', '<BS>']
            \ }

" Use fd for Ctrl p if it exists.
if executable('fd')
    let g:ctrlp_user_command = 'fd --type f --hidden --exclude ".git" --follow "" %s'
endif

" Open the file in the current pane even if it's open in another pane.
let g:ctrlp_switch_buffer=0

" Use Ctrl-g while in command mode to search in command history
cnoremap <silent> <C-g> <C-c>:call ctrlp#init(ctrlp#commandline#id())<CR>

" Gitv
let g:Gitv_OpenPreviewOnLaunch=1

" Fugitive
" View staged changes.
function! GitDiffStaged(new_tab)
    if a:new_tab
        call NewTabWithGitDir()
    endif
    Git! diff --staged
    set foldmethod=syntax
endfunction
" Open a new tab if command is run with a bang.
command! -bang Greview call GitDiffStaged(<bang>0)

function! DetectForEmptyBuffer()
  if expand('<amatch>') == '' && (!exists('b:git_detected_for_cwd') || b:git_detected_for_cwd !=# getcwd())
    if exists('b:git_dir')
      unlet b:git_dir
    endif
    call fugiive#detect(getcwd())
    let b:git_detected_for_cwd = getcwd()
  endif
endfunction

" Maintain fugitive status when opening a new tab.
" Maintain the `git_dir` variable when opening a new tab, and then call
" fugitive#detect. By maintaining `git_dir`, we avoid IO by the call to
" fugitive#detect.
" See also:
"   https://github.com/tpope/vim-fugitive/pull/42
"   https://github.com/tpope/vim-fugitive/issues/832
function! NewTabWithGitDir()
    if exists('b:git_dir')
        let l:old_tab_git_dir = b:git_dir
    endif
    tabnew
    if exists('l:old_tab_git_dir')
        let b:git_dir = l:old_tab_git_dir
        call fugitive#detect(getcwd())
    endif
endfunction
nnoremap <silent> <leader>t :call NewTabWithGitDir() <CR>

" Codefmt
Glaive codefmt plugin[mappings]

function! s:AddCodefmtEqualMapping() abort
    " Replace all the various ={motion} keys to codefmt
    nnoremap <buffer> = :set opfunc=codefmt#FormatMap<CR>g@
    nnoremap <buffer> == :FormatLines<CR>
    vnoremap <buffer> = :FormatLines<CR>
endfunction

augroup codefmt_options
    autocmd FileType python,c,cpp,proto,javascript call s:AddCodefmtEqualMapping()
    autocmd FileType python let b:codefmt_formatter = 'yapf'
augroup end

" vimtex
if system("uname") =~ "Darwin"
    let g:vimtex_view_general_viewer
      \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
    let g:vimtex_view_general_options = '@line @pdf @tex'
end

function! VimtexMappingUpdates()
    silent! unmap <buffer> {
    silent! unmap <buffer> }
endfunction

" YouCompleteMe
if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = [
    \ 're!\\[A-Za-z]*cite[A-Za-z]*(\[[^]]*\]){0,2}{[^}]*',
    \ 're!\\[A-Za-z]*ref({[^}]*|range{([^,{}]*(}{)?))',
    \ 're!\\hyperref\[[^]]*',
    \ 're!\\includegraphics\*?(\[[^]]*\]){0,2}{[^}]*',
    \ 're!\\(include(only)?|input){[^}]*',
    \ 're!\\\a*(gls|Gls|GLS)(pl)?\a*(\s*\[[^]]*\]){0,2}\s*\{[^}]*',
    \ 're!\\includepdf(\s*\[[^]]*\])?\s*\{[^}]*',
    \ 're!\\includestandalone(\s*\[[^]]*\])?\s*\{[^}]*',
    \ 're!\\usepackage(\s*\[[^]]*\])?\s*\{[^}]*',
    \ 're!\\documentclass(\s*\[[^]]*\])?\s*\{[^}]*',
    \ 're!\\[A-Za-z]*',
    \ ]
" <F8> prints the type of the identifier under the cursor.
nnoremap <silent> <F8> :YcmCompleter GetType<CR>
augroup youcompleteme_options
    autocmd!
    autocmd FileType python nnoremap <C-]> :YcmCompleter GoToDefinitionElseDeclaration<CR>
    autocmd FileType python nnoremap <leader>r :YcmCompleter GoToReferences<CR>
augroup end
let g:ycm_autoclose_preview_window_after_completion = 1

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-b>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" Neomake
let g:neomake_matlab_mlint_maker = {}
let g:neomake_matlab_enabled_makers = [ "mlint" ]
let g:neomake_python_enabled_makers = ['python', 'frosted', 'pep8', 'flake8']
augroup neomake_options
    autocmd!
    autocmd! BufWritePost * Neomake
augroup end
function! MyneomakeCleanFile()
  let buf = bufnr('%')
  call neomake#highlights#ResetFile(buf)
  call neomake#signs#ResetFile(buf)
  call neomake#signs#CleanOldSigns(buf, 'file')
  call neomake#statusline#ResetCountsForBuf(buf)
endfunction
com! NeomakeCleanFile call MyneomakeCleanFile()
nnoremap <F7> :Neomake<CR>

" Pandoc
let g:pandoc#syntax#codeblocks#embeds#langs = ["bash=sh", "python"]

" incsearch / vim-search-pulse / vim-asterisk
let g:vim_search_pulse_disable_auto_mappings = 1
" Pulse the pattern. Temporarily enabling this (instead of pulsing the line) due
" to <https://github.com/inside/vim-search-pulse/issues/19>.
let g:vim_search_pulse_mode = 'pattern'
nmap n n<Plug>Pulse
nmap N N<Plug>Pulse

" incsearch.vim
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" incsearch-fuzzy.vim
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

" vim-asterisk
map *  <Plug>(asterisk-z*)<Plug>Pulse
map g* <Plug>(asterisk-gz*)<Plug>Pulse
map #  <Plug>(asterisk-z#)<Plug>Pulse
map z# <Plug>(asterisk-gz#)<Plug>Pulse

" cscope
nnoremap <leader>cs :cs find s <C-R>=expand("<cword>")<CR><CR>
nnoremap <leader>cg :cs find g <C-R>=expand("<cword>")<CR><CR>
" nnoremap <leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>
" nnoremap <leader>t :cs find t <C-R>=expand("<cword>")<CR><CR>
" nnoremap <leader>e :cs find e <C-R>=expand("<cword>")<CR><CR>
" nnoremap <leader>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
" nnoremap <leader>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
" nnoremap <leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" vim-airline
let g:airline_theme='dark'
let g:airline#extensions#bufferline#enabled = 1
let g:airline_section_a='%{airline#util#append(airline#parts#crypt(),0)}%{airline#util#append(airline#parts#paste(),0)}%{airline#util#append(airline#extensions#keymap#status(),0)}%{airline#util#append(airline#parts#spell(),0)}%{airline#util#append("",0)}%{airline#util#append("",0)}%{airline#util#append(airline#parts#iminsert(),0)}'
" Don't show file type
let g:airline_section_x='%{airline#util#prepend(airline#extensions#tagbar#currenttag(),0)}'
let g:airline_section_y=''  " Don't show file format (e.g. utf-8[unix])
let g:airline_section_z=''  " Don't show line number, percentage, etc.
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.maxlinenr=''

let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
    if g:airline_theme != 'dark'
        return
    endif
    if &background == 'dark'
        let l:IP = [ '' , '' , 255, 242, '' ]
        let l:AP = [ '' , '' , 238, 252, '' ]
    else
        let l:IP = [ '' , '' , 238, 248, '' ]
        let l:AP = [ '' , '' , 252, 238, '' ]
    endif
    for colors in values(a:palette.inactive)
        let colors[2] = l:IP[2]
        let colors[3] = l:IP[3]
    endfor
    for colors in values(a:palette.inactive_modified)
        let colors[2] = l:IP[2]
        let colors[3] = l:IP[3]
    endfor
    let a:palette.tabline = {}
    let a:palette.tabline.airline_tabfill = copy(a:palette.normal.airline_c)
    if &background == 'dark'
        let a:palette.tabline.airline_tabfill[3] = 234
    else
        let a:palette.tabline.airline_tabfill[3] = 255
    end

    let a:palette.normal.airline_c[2] = l:AP[2]
    let a:palette.normal.airline_c[3] = l:AP[3]
endfunction
" Just show the filename (no path) in the tab
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#close_symbol = 'x'
let g:airline#extensions#tabline#show_close_button = 0

autocmd FileType python BracelessEnable +indent

" python-syntax
let g:python_highlight_all=1

" BufExplorer
" Open buffer in current pane even if it is open in another frame.
let g:bufExplorerFindActive=0 " Do not go to active window.

"                                                                           }}}

" Indentation                                                               {{{
" ===========

set autoindent
set smarttab

" When moving the cursor up or down just after inserting indent for
" 'autoindent', do not delete the indent.
set cpoptions+=I

" 4 col tab generally
set ts=4 sts=4 sw=4 expandtab

" Highlight tabs instead of spaces
set list
set listchars=tab:>~,trail:·

function! SetWebdevOptions()
    " 2 space tabs
    setlocal expandtab ts=2 sts=2 sw=2

    " Match tags
    runtime! macros/matchit.vim
endfunction

set formatoptions+=ro " Automatically insert comment leader after <Enter>/o/O.
set formatoptions-=t  " Don't auto wrap based on text width.

"                                                                           }}}

" Mappings                                                                  {{{
" ========

set timeoutlen=150

" Easy window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Easy window resizing
" TODO: Figure out some nice ways to do this.  <C-m> maps to enter...
" otherwise <C-m> <C-n> seemed nice for <C-w>> and <C-w>< hm maybe use
" leaders?
noremap + <C-w>+
noremap _ <C-w>-

" map shift h and shift l to beg and end of line
noremap H ^
noremap L $
noremap HH H
noremap LL L

" semicolon as colon
noremap ; :
" to keep original semicolon functionality:
noremap : ;

" Add lines in normal mode.
nnoremap <leader>o o<Esc>
nnoremap <leader>O O<Esc>


" Use smooth scroll function from the plugin
nnoremap <silent> <C-d> 10j
nnoremap <silent> <C-u> 10k

" toggle highlighting
nnoremap <silent> <space> :noh<CR><space>

" undo blocks auto created in insert mode (no more undoing huge blocks
" accidentally)
inoremap <CR> <c-g>u<CR>
inoremap <c-w> <c-g>u<c-w>

" k/j to move through lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap gj j
nnoremap gk k
vnoremap gj j
vnoremap gk k

" escape is hard to reach so map kj to <ESC>
" Also, if I'm in insert mode, hit kj, and hit <i>, I want to be in the same
" position; hence the extra <l>.
inoremap kj <ESC>l
nnoremap kj <ESC>

" exchange this word with next word using gw
noremap gw :s/\v(<\k*%#\k*>)(\_.{-})(<\k+>)/\3\2\1/<Return> :noh<Return>

" Paste mode
set pastetoggle=<F3>

" Skip over folds when using {/}
" Courtesy http://superuser.com/a/1180075/173299
function! s:SkipFold(direction) abort
  let l:currentLine = line('.')
  while foldclosed(l:currentLine) != -1
    let l:currentLine = search('^$', (a:direction ? 'Wn' : 'Wnb'))
    if l:currentLine == 0
      if a:direction
        call cursor(line('$'), strlen(getline(line('$'))))
      else
        call cursor(1, 1)
      endif
      break
    endif
    call cursor(l:currentLine, 0)
  endwhile
endfunction

nnoremap <silent> } }:call <SID>SkipFold(1)<cr>
nnoremap <silent> { {:call <SID>SkipFold(0)<cr>

" Disable increment/decrement of numbers, which I've basically always done on
" accident instead of on purpose.
nnoremap <silent> <C-a> <Nop>
vnoremap <silent> <C-a> <Nop>
nnoremap <silent> <C-x> <Nop>
vnoremap <silent> <C-x> <Nop>

"                                                                           }}}

" Commands                                                                  {{{
" ========

command! -range=% Strip :<line1>,<line2>s/\s\+$//g
command! E :Explore
command! Ex :Extradite

" Allow saving of files as sudo when I forgot to start vim using sudo.
" http://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work
if has("unix")
    cabbrev Wsudo :w !sudo tee > /dev/null %
endif

command! -nargs=* Gitc call Gitv_OpenGitCommand(<q-args>, 'new')

"                                                                           }}}

" Backup                                                                    {{{
" ======

set backup
" Force backups to be copied, rather than renaming the active file to the
" backup file. If backupcopy is no or auto, it seems to cause some issues with
" NFS, where another terminal on a different machine may hold the handle to
" the backup file instead of the updated file.
set backupcopy=yes
" Adding "//" at the end asks Vim to use the absolute path of the file to avoid
" filename collisions.
if has("win32")
    let mybackupdir = $TEMP . "/vim-backup//"
    let myswpdir = $TEMP . "/vim-swp//"
elseif has("unix")
    let mybackupdir = $HOME . "/.vim-backup//"
    let myswpdir = $HOME . "/.vim-swp//"
endif

if !isdirectory(mybackupdir)
    call mkdir(mybackupdir)
endif
if !isdirectory(myswpdir)
    call mkdir(myswpdir)
endif
execute "set backupdir=".mybackupdir
execute "set directory=".myswpdir

"                                                                           }}}

" Appearance                                                                {{{
" ==========

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
  syntax on
  " have to toggle filetype for issue (Vim not detecting CoffeeScript
  " filetype): http://stackoverflow.com/questions/5602767/
  filetype off
  filetype on
  set hlsearch
endif

" always have status line
set laststatus=2
set ruler

set fillchars=vert:\|,fold:\ 

" Modification of
" https://github.com/Konfekt/FoldText/blob/9292a6a7d71cdf6b00d8870457b4f70f9e21abf7/plugin/FoldText.vim
" NOTE: If the foldtext symbol (▸) does not render properly in the vimrc or in
" the actual folds, you may need to re-write the vimrc with a utf-8 encoding
" `:w++ enc=utf-8`. If that doesn't work, google for things like "utf-8 vim
" characters not showing up" and good luck!
function! CustomFoldText(delim)
  " Get first non-blank line
  let fs = v:foldstart
  while getline(fs) =~ '^\s*$' 
      let fs = nextnonblank(fs + 1)
  endwhile

  if fs > v:foldend
      let line = getline(v:foldstart)
  else
      let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
  endif

  " indent foldtext corresponding to foldlevel
  let indent = repeat(' ',shiftwidth())
  let foldLevelStr = repeat(indent, v:foldlevel-1)
  " We use "▸ " at the beginning, so remove 2 spaces from the foldlevel
  if strwidth(foldLevelStr) > 2
      let foldLevelStr = strpart(foldLevelStr, 2)
  end
  let foldLineHead = "▸ " . substitute(line, '^\s*', foldLevelStr, '')

  " size foldtext according to window width
  let w = winwidth(0) - &foldcolumn - (&number ? &numberwidth : 0)
  let foldSize = 1 + v:foldend - v:foldstart


  " build up foldtext
  let foldLineTail = " " . foldSize . " lines "
  let lengthTail = strwidth(foldLineTail)
  let lengthHead = w - (lengthTail + indent)

  if strwidth(foldLineHead) > lengthHead
    let foldLineHead = strpart(foldLineHead, 0, lengthHead-2) . '..'
  endif

  let lengthMiddle = w - strwidth(foldLineHead.foldLineTail)

  " truncate foldtext according to window width
  let expansionString = repeat(a:delim, lengthMiddle)

  return foldLineHead . expansionString . foldLineTail
endfunction

set foldtext=CustomFoldText('\ ')  " Overrides fold char


if &t_Co >= 256 || has("gui_running")
    function! ColorschemeChange()
        let s:is_dark=(&background == 'dark')
        if s:is_dark
            hi! Folded ctermfg=141 ctermbg=234
            hi! DiffText ctermfg=0 ctermbg=45
            hi! DiffChange ctermfg=45 ctermbg=234
            hi! DiffAdd ctermfg=10 ctermbg=234
            hi! DiffDelete ctermfg=1 ctermbg=234
        else
            " The default normal text color is not dark enough
            hi! Normal ctermfg=black
            hi! Folded ctermfg=4 ctermbg=250
        endif
    endfunction
    if $CONFIG_LIGHT_COLORS == '1'
        set background=light
    else
        set background=dark
    end
    let g:PaperColor_Theme_Options = {
      \   'language': {
      \      'python': {
      \        'highlight_builtins' : 1
      \      },
      \      'lua': {
      \        'highlight_builtins' : 1
      \      },
      \      'matlab': {
      \        'highlight_builtins' : 1
      \      },
      \      'cpp': {
      \        'highlight_standard_library': 1
      \      },
      \      'c': {
      \        'highlight_builtins' : 1
      \      }
      \   }
      \ }
    augroup colors
        autocmd!
        autocmd ColorScheme * hi! link diffAdded DiffAdd
        autocmd ColorScheme * hi! link diffRemoved DiffDelete
        autocmd ColorScheme * hi! link pythonBuiltin pythonStatement
        autocmd ColorScheme * hi! link pythonBuiltinFunc pythonStatement
        autocmd ColorScheme * hi! link pythonBuiltinObj pythonStatement
        autocmd ColorScheme * hi! link pythonException pythonStatement
        autocmd ColorScheme * hi! link pythonBoolean pythonStatement
        autocmd ColorScheme * hi! link pythonImport pythonInclude
        " autocmd ColorScheme * hi! link pythonStatement pythonOperator
        autocmd ColorScheme * call ColorschemeChange()
    augroup end
    colorscheme PaperColor
else
    colorscheme slate
endif

if has("gui_running")
    call plug#load('guifontpp')

    " Default fonts suck
    if has("unix")
        if system('uname') =~ 'Darwin'
            set guifont=Monaco:h10
        endif
    elseif has ("win32")
        set guifont=Consolas:h10
    endif
endif

" Echo the syntax group my cursor is over
nnoremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" no error bells
set vb t_vb=

" i need line numbers
set nu

" Show as much as possible of last line on screen instead of `@'
set display=lastline

"                                                                           }}}

" Other settings                                                            {{{
" ==============

" Use putty for SCP
if has("win32")
    let g:netrw_silent = 1
    let g:netrw_cygwin = 0
    let g:netrw_list_cmd  = 'C:\"Program Files (x86)"\PuTTY\plink.exe HOSTNAME ls -Fa'
    let g:netrw_scp_cmd  = 'C:\"Program Files (x86)"\PuTTY\pscp.exe -q -batch'
    let g:netrw_sftp_cmd = 'C:\"Program Files (x86)"\PuTTY\psftp.exe'
endif

" make the working directory be the directory of the current file
set autochdir
let g:netrw_keepdir=0

let g:netrw_preview = 1   " Open preview in vertical split
let g:netrw_winsize = 30  " Set netrw window size to 30 columns
let g:netrw_liststyle = 3 " Use tree view

" Sort netrw case insensitive
let g:netrw_sort_options="i"

" case search
set ignorecase
set smartcase
set incsearch

set history=1000

set modeline

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" some terminal issue fixes
if has('mouse')
  set mouse=a
endif

" Wrap cursor
set ww+=<,>,[,]

" stop highlighting the current line if not active
augroup highlight_current_line
    autocmd!
    autocmd WinLeave * set nocursorline
    autocmd WinEnter * if !&diff | set cursorline | endif
augroup end
set cursorline

" Ask instead of erroring.
set confirm

" Use unix line endings by default.
set fileformat=unix
set fileformats=unix,dos

" Highlight at 80 char by default.
set colorcolumn=80

" Show (partial) command in status line (e.g. the 23 in "23k" before you press
" k).
set showcmd

" Round indent to nearest shiftwidth.
set shiftround

" Text width 80, not 79 (which is the default).
set textwidth=80

if executable('rg')
    set grepprg=rg\ -H\ --vimgrep
endif
command! -nargs=+ Grep execute "Gcd | silent grep! <args>" | copen
nnoremap  <leader>/ :Grep "\b<cword>\b"<CR>

" Open quick fix window after grep
augroup quickfix_open
    autocmd!
    autocmd QuickFixCmdPost grep cwindow
augroup END

if has("nvim")
    set inccommand=nosplit
endif

"                                                                           }}}

" Filetype specific                                                         {{{

augroup file_settings
    autocmd!
    autocmd BufEnter *.prototxt set syntax=yaml
    autocmd BufRead,BufNewFile *.cfg set filetype=python
    autocmd BufRead,BufNewFile *.ejs set filetype=html
    autocmd BufRead,BufNewFile *.md set formatoptions+=t filetype=pandoc
    " Without "_" in iskeyword, highlighting of source code in markdown files
    " has lots of ugly red 'error' highlights.
    autocmd BufRead,BufNewFile *.md setlocal iskeyword+=_
    autocmd BufRead,BufNewFile *.xaml set filetype=xml
    autocmd FileType bibtex,python setlocal expandtab ts=4 sts=4 sw=4
    autocmd FileType c,cpp setlocal expandtab ts=2 sts=2 sw=2
    " Python style guide recommends 79 characters, not 80.
    autocmd FileType python set colorcolumn=79 textwidth=79
    autocmd Filetype html,css,javascript,ejs,xml,xbl,less call SetWebdevOptions()
    autocmd Filetype latex,tex,plaintex call LatexSettings()
    autocmd Filetype matlab call MatlabSettings()
augroup end

" Use LaTeX flavor
let g:tex_flavor="latex"


"                                                                           }}}

" Helper functions                                                          {{{
" ================

function! MatlabSettings()
    compiler mlint
    nnoremap <buffer> <LocalLeader>m :exec(":e " . expand("<cword>") . ".m")<CR>
endfunction

function! LatexSettings()
    let g:maplocalleader=","
    inoremap <buffer> fl \
    inoremap <buffer> fj {
    inoremap <buffer> fk }
    " Turn off indentexpr for LaTeX, as it is extremely frustrating.
    " See, for example, the issue raised here (in 2008!)
    " <http://sourceforge.net/p/vim-latex/mailman/message/19080857/>
    setlocal indentexpr=

    inoremap <buffer> fm \mathcal{

    inoremap <buffer> { <nop>
    inoremap <buffer> } <nop>
    inoremap <buffer> \ <nop>

    inoremap <buffer> <Leader>tf \tfrac{
    inoremap <buffer> <Leader>f \frac{
    inoremap <buffer> <Leader>a \abs{}<Left>
    inoremap <buffer> <Leader>b \begin{}<CR>\end{}<Esc>k$i
    inoremap <buffer> <Leader>ba \begin{align*}<CR>\end{align*}<C-o>O
    inoremap <buffer> <Leader>be \begin{enumerate}<CR>\end{enumerate}<C-o>O

    inoremap <buffer> <Leader>l \left
    inoremap <buffer> <Leader>r \right

    " compile latex file, then run it (%:r = filename without .tex extensions)
    if has("win32")
        nnoremap <silent> <buffer> <f3> :exec("silent ! latexmk -pdf % && start %:r".".pdf")<cr>:redraw!<cr>
        nnoremap <silent> <buffer> <f4> :exec("silent ! make %:r".".pdf && start %:r".".pdf")<cr>:redraw!<cr>
    elseif has("unix")
        if system('uname') =~ 'Darwin'
            nnoremap <silent> <buffer> <f3> :exec("silent ! latexmk -pdf % ; open %:r".".pdf")<cr>:redraw!<cr>
            nnoremap <silent> <buffer> <f4> :exec("silent ! make %:r".".pdf ; open %:r".".pdf")<cr>:redraw!<cr>
        else
            nnoremap <silent> <buffer> <f3> :exec("silent ! latexmk -pdf % ; xdg-open %:r".".pdf")<cr>:redraw!<cr>
            nnoremap <silent> <buffer> <f4> :exec("silent ! make %:r".".pdf ; xdg-open %:r".".pdf")<cr>:redraw!<cr>
        endif
    endif
    let g:surround_36 = "$\r$"

    call VimtexMappingUpdates()
endfunction
