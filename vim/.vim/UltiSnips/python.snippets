priority -50

extends python

snippet argparse "Argument Parsing" bm
# Use first line of file docstring as description if it exists.
parser = argparse.ArgumentParser(
	description=__doc__.split('\n')[0] if __doc__ else '',
	formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('argument1')
parser.add_argument('argument2', help='Argument 2')
parser.add_argument('--argument3',
					type=int,
					default=50,
					help='argument3',
					required=True)

args = parser.parse_args()
endsnippet

snippet logging "Logging" b
logging.getLogger().setLevel(logging.INFO)
logging.basicConfig(format='%(asctime)s.%(msecs).03d: %(message)s',
					datefmt='%H:%M:%S')
endsnippet

snippet csvwritedict "Write with csv.DictWriter" b
with open('filename.csv', 'w') as csvfile:
	fieldnames = ['first_name', 'last_name']
	writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
	writer.writeheader()
	writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})
endsnippet

snippet csvreaddict "Read with csv.DictWriter" b
with open('filename.csv') as csvfile:
	reader = csv.DictReader(csvfile)
	for row in reader:
		print(row['first_name'], row['last_name'])
endsnippet

snippet csvread "Read from csv" b
with open('filename.csv', 'rb') as csvfile:
	reader = csv.reader(csvfile, delimiter=',')
	for row in reader:
		print(row[0], row[1], row[2])
endsnippet

snippet csvwrite "Write csv" b
import csv
with open('filename.csv', 'wb') as csvfile:
	spamwriter = csv.writer(csvfile, delimiter=',')
	spamwriter.writerow(['Hello', 'there'])
endsnippet

snippet logging_file "Logging to file" b
def _set_logging(logging_filepath):
	"""Setup root logger to log to file and stdout.

	All calls to logging will log to \`logging_filepath\` as well as stdout.
	Also creates a file logger that only logs to `logging_filepath`, which can
	be retrieved with logging.getLogger(logging_filepath).

	Args:
		logging_filepath (str): Path to log to.
	"""
	log_format = ('%(asctime)s %(filename)s:%(lineno)4d: ' '%(message)s')
	stream_date_format = '%H:%M:%S'
	file_date_format = '%m/%d %H:%M:%S'

	# Clear any previous changes to logging.
	logging.root.handlers = []
	logging.root.setLevel(logging.INFO)

	file_handler = logging.FileHandler(logging_filepath)
	file_handler.setFormatter(
		logging.Formatter(log_format, datefmt=file_date_format))
	logging.root.addHandler(file_handler)

	# Logger that logs only to file. We could also do this with levels, but
	# this allows logging specific messages regardless of level to the file
	# only (e.g. to save the diff of the current file to the log file).
	file_logger = logging.getLogger(logging_filepath)
	file_logger.addHandler(file_handler)
	file_logger.propagate = False

	console_handler = logging.StreamHandler()
	console_handler.setFormatter(
		logging.Formatter(log_format, datefmt=stream_date_format))
	logging.root.addHandler(console_handler)

	logging.info('Writing log file to %s', logging_filepath)
endsnippet

snippet mkdir_p "mkdir -p" b
def mkdir_p(path):
	"""Create directory if it does not already exist.

	Courtesy: https://stackoverflow.com/a/600612/1291812"""
	try:
		os.makedirs(path)
	except OSError as exc:  # Python >2.5
		if exc.errno == errno.EEXIST and os.path.isdir(path):
			pass
		else:
			raise
endsnippet

# vim:ft=snippets:
