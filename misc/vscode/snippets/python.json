{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"logging": {
		"prefix": "logging",
		"body": "logging.getLogger().setLevel(logging.INFO)\nlogging.basicConfig(format='%(asctime)s.%(msecs).03d: %(message)s',\n\t\t\t\t\tdatefmt='%H:%M:%S')",
		"description": "Logging"
	},
	"csvwritedict": {
		"prefix": "csvwritedict",
		"body": "fieldnames = ['first_name', 'last_name']\nwriter = csv.DictWriter(f, fieldnames=fieldnames)\nwriter.writeheader()\nwriter.writerow({'first_name': 'Baked', 'last_name': 'Beans'})",
		"description": "Write with csv.DictWriter"
	},
	"csvreaddict": {
		"prefix": "csvreaddict",
		"body": "reader = csv.DictReader(f)\nfor row in reader:\n\tprint(row['first_name'], row['last_name'])",
		"description": "Read with csv.DictWriter"
	},
	"csvread": {
		"prefix": "csvread",
		"body": "reader = csv.reader(f)\nfor row in reader:\n\tprint(row[0], row[1], row[2])",
		"description": "Read from csv"
	},
	"csvwrite": {
		"prefix": "csvwrite",
		"body": "writer = csv.writer(f)\nwriter.writerow(['Hello', 'there'])",
		"description": "Write csv"
	},
	"ipdb": {
		"prefix": "ipdb",
		"body": [
			"import ipdb; ipdb.set_trace()"
		]
	},
	"script": {
		"prefix": "script",
		"body": [
			"import argparse",
			"import logging",
			"from pathlib import Path",
			"",
			"from script_utils.common import common_setup",
			"",
			"",
			"def main():",
			"    # Use first line of file docstring as description if it exists.",
            "    parser = argparse.ArgumentParser(",
            "        description=__doc__.split('\\n')[0] if __doc__ else '',",
            "        formatter_class=argparse.ArgumentDefaultsHelpFormatter)",
            "    parser.add_argument('argument1')",
            "    parser.add_argument('argument2', help='Argument 2')",
            "    parser.add_argument('--argument3',",
            "                        type=int,",
            "                        default=50,",
            "                        help='argument3',",
            "                        required=True)",
            "    parser.add_argument('--output-dir',",
            "                        type=Path,",
            "                        required=True)",
			"",
			"    args = parser.parse_args()",
			"    args.output_dir.mkdir(exist_ok=True, parents=True)",
			"    common_setup(__file__, args.output_dir, args)",
			"    logging.info('kem cho?')",
			"",
			"",
			"if __name__ == \"__main__\":",
			"    main()",
			""
		]
	},
	"argparse": {
		"prefix": "argparse",
		"body": [
            "    parser = argparse.ArgumentParser()"
            "    parser.add_argument(\"argument1\", help=\"Argument 1\")",
            "    parser.add_argument(\"--argument2\", type=int, default=50, required=True)",
            "    parser.add_argument(\"--output-dir\", type=Path, required=True)",
			"",
			"    args = parser.parse_args()",
		]
	}
}
