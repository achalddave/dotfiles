# Get directory that this script resides in.
# <http://unix.stackexchange.com/a/136565/146303>
zshrc_dir="${0:a:h}"

# Available configurations; set from ~/.zshrc_before.
# TODO(achald): Make this an associative array.
CONFIG_256_COLORS=${CONFIG_256_COLORS:-1}
CONFIG_LIGHT_COLORS=${CONFIG_LIGHT_COLORS:-0}

# Setup completion. This needs to happen before zgen is sourced.
autoload -Uz compinit
compinit

# Helper for working with json
source scripts/pyjson.zsh

# For colors
source scripts/spectrum.zsh

# turn on correction
setopt correctall

# Git file completion is super slow; this should fix it
# http://stackoverflow.com/questions/9810327/
__git_files () {
    _wanted files expl 'local files' _files
}

zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' max-errors 3
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]} r:|[._-]=** r:|=**' 'r:[^A-Z0-9]||[A-Z0-9]=** r:|=*'

# 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'
zstyle :compinstall filename '/Users/achal/.zshrc'
zstyle ':completion:*' menu select=2

# Key mappings

# Vim
# When I hit <kj>, I want to stay at my current position (that is, if I hit
# <i> right after, I want to be at the same place). By default, Vim would
# move you one to the left. This does the same thing as:
#   nnoremap kj <Esc>l
# This function takes care of doing this, and 'kj' is later bound to it.
function vi-cmd-mode-forward-fn { zle vi-cmd-mode ; zle vi-forward-char }
zle -N vi-cmd-mode-forward vi-cmd-mode-forward-fn

bindkey -v
KEYTIMEOUT=15
autoload edit-command-line
zle -N edit-command-line
bindkey '^E' edit-command-line
bindkey -M viins 'kj' vi-cmd-mode-forward # See comment above vi-cmd-mode-forward-fn.
bindkey -M viins '^R' history-incremental-search-backward
bindkey -M vicmd 'u' undo
bindkey -M vicmd '^R' redo
bindkey -M vicmd ':' vi-repeat-find
bindkey -M vicmd ';' execute-named-cmd


# # See http://www.zsh.org/mla/users/2009/msg00812.html.
# # Otherwise you can't backspace things you didn't just insert.
bindkey "^W" backward-kill-word    # was vi-backward-kill-word
bindkey "^H" backward-delete-char  # was vi-backward-delete-char
bindkey "^U" kill-line             # was vi-kill-line
bindkey "^?" backward-delete-char  # was vi-backward-delete-char

# Bash style word selection (e.g. ctrl-w should kill backwards up to a slash)
autoload -U select-word-style
select-word-style bash

bindkey "[A" history-beginning-search-backward-end
bindkey "[B" history-beginning-search-forward-end
bindkey -M vicmd 'k' history-beginning-search-backward-end
bindkey -M vicmd 'j' history-beginning-search-forward-end

# Show "[Normal]" vim mode indicator on the right side of the screen.

LINE='\E]50;CursorShape=1\x7' # Line Cursor
BLOCK='\E]50;CursorShape=0\x7' # Block Cursor

print-ins () {
    if [[ -n "$TMUX" ]] ; then
        print -n -- "\EPtmux;\E$LINE\E\\"
    else
        print -n -- $LINE
    fi
}

print-cmd () {
    if [[ -n "$TMUX" ]] ; then
        print -n -- "\EPtmux;\E$BLOCK\E\\"
    else
        print -n -- $BLOCK
    fi
}

function zle-line-init zle-keymap-select {
    SUFFIX="%{$fg[cyan]%}[Normal]%{$fg[reset]%}"
    if [[ "$KEYMAP" == 'vicmd' ]] ; then
        RPROMPT="${RPS1}${SUFFIX}"
        print-cmd
    else
        # Remove suffix from end of line.
        RPS1=${RPS1%%${SUFFIX}}
        print-ins
    fi
    zle reset-prompt
    zle -R
}

zle -N zle-line-init
zle -N zle-keymap-select

# history
HISTFILE=~/.zsh_hist
HISTSIZE=10000
SAVEHIST=20000

# please don't beep
unsetopt beep

# Changing/making/removing directory
setopt autocd extendedglob
# Removing because of issue with autojump:
#   https://github.com/joelthelion/autojump/issues/312
# setopt auto_name_dirs
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus

# laziness
# colors!
if [[ `uname` == "Darwin" ]] && ! ls --version | grep -q 'GNU'
then
    alias ls='ls -G'
elif [[ `uname` == "Darwin" ]] || # Darwin with GNU ls
     [[ `uname` == "Linux" ]] ||
     [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ||
     [[ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]]
then
    alias ls='ls --color=always -p -v'
fi

alias c='cd'
alias grep='grep --color=tty'
alias l='ls'
alias la='ls -A'
alias ll='ls -Alhp'
alias g='git'
alias py='python'
alias ipy='ipython'
alias so='source'
function sa () {
    if [[ "$#" < 1 || ("$1" != "-f" && "$1" != "--force" ) ]] ; then
        if [ -n "$SSH_AUTH_SOCK" ] ; then
            echo "You already seem to have an SSH agent running."
            echo "Pass [-f|--force] to override this."
            return 1
        fi
    fi
    eval `ssh-agent`
    ssh-add
}

function sockd () {
    echo $SSH_AUTH_SOCK > "/tmp/achal-ssh-sock-$(date +%3N)"
    echo $DISPLAY > "/tmp/achal-display-$(date +%3N)"
}

function socku () {
    export SSH_AUTH_SOCK=$(cat $(/bin/ls -dt /tmp/achal-ssh-sock-* | head -1))
    export DISPLAY=$(cat $(/bin/ls -dt /tmp/achal-display-* | head -1))
}

# directory laziness
alias ..='cd ..'
alias cd..='cd ..'
alias cd...='cd ../..'
alias cd....='cd ../../..'
alias cd.....='cd ../../../..'
alias cd/='cd /'

# safety
setopt noclobber
alias cp='cp -i'
alias mv='mv -i'

# prompt and colors
autoload -Uz vcs_info
autoload -U colors && colors
source colors

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git*' formats '(%b) '

precmd() { vcs_info }

setopt prompt_subst
if [[ "$CONFIG_LIGHT_COLORS" == 1 ]] ; then
    light_colors
else
    dark_colors
fi

if [[ "$TERM" == "screen" ]] ; then
    export TERM=screen-256color-bce
fi

# load any specific dircolors if necessary
[[ -e ~/.dircolors ]] && eval "$(dircolors ~/.dircolors)"

# FIX FOR ZSH HISTORY CURSOR
# This should work exactly as bash's history-search-[back|for]ward:
#   i.e. if you have an empty line and hit <Up>, your cursor will go to the end
#   of line if you have some letters and hit <Up>, your cursor will stay where
#   it was and zsh will fill the rest of the line with the history search.
#
# Much of this function taken from http://www.zsh.org/mla/users/1999/msg00555.html
function history-search-end {
    integer ocursor=$CURSOR

    if [[ $LASTWIDGET = history-beginning-search-*-end ]]; then
      # Last widget called set $hbs_pos.
      CURSOR=$hbs_pos
    else
      hbs_pos=$CURSOR
    fi

    if zle .${WIDGET%-end}; then
      # if we started at front, go to end of line
      if [ $CURSOR -eq 0 ] ; then
          zle .end-of-line
      else
          # otherwise, keep cursor where it was
          CURSOR=$hbs_pos
      fi
    else
      # failure, restore position
      CURSOR=$ocursor
      return 1
    fi
}
autoload -U history-beginning-search-backward-end
autoload -U history-beginning-search-forward-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

# better diff (TODO: share this with bash)
function dff() {
    diff -u "$@" \
        | sed 's/^-/\x1b[31m-/;s/^+/\x1b[32m+/;s/^@/\x1b[34m@/;s/$/\x1b[0m/' \
        | less -RF
}

# Useful functions

# swap two files (not directories!)
function swap() {
    if [[ "$#" -lt 2 ]] || [[ ! -f "$1" ]] || [[ ! -f "$2" ]]; then
        if [[ -d "$1" ]] || [[ -d "$2" ]] ; then
            echo "You can't swap two directories right now."
        else
            echo "swap [file1] [file2]"
        fi
        return 1
    fi

    mydir=$(dirname "$1");
    if type mktemp > /dev/null ; then
        tmpfile=$(mktemp "$mydir"/XXXXXX)
    else
        tmpfile="/tmp/$mydir"
    fi

    mv -f "$1" "$tmpfile"
    mv "$2" "$1"
    mv "$tmpfile" "$2"
}

# Go up k times
function up() {
    if [[ "$#" -lt 1 ]] ; then
        echo "Usage: up [num_directories]"
        return 1
    fi
    # We could cd .. multiple times, but this pollutes the directory stack.
    dir_path=''
    for i in $(seq $1) ; do
        dir_path="../${dir_path}"
    done
    cd $dir_path
}

# Usage:
#   echo -n "1\n2" | sum
sum() {
    paste -sd+ - | bc
}

# Load zgen.
# This needs to be done at the end of the zshrc: some plugins (e.g.
# zsh-syntax-highlighting) need to be sourced after all 'custom widgets have
# been created (i.e., after all `zle -N` calls and after running `compinit`)'.
# Strange things happen if you don't do this, such as
# https://github.com/zsh-users/zsh-syntax-highlighting/issues/67
export ZGEN_DIR="${zshrc_dir}/.zgen"
if ! where zgen >/dev/null; then
    # Temporary hack due to
    # https://github.com/zsh-users/zsh-autosuggestions/pull/150
    source zgen/zgen.zsh
fi

# If the init scipt doesn't exist, generate the init script.
if ! zgen saved; then
    if [ "$has_256" -eq 1 ] ; then
        zgen load robbyrussell/oh-my-zsh lib/spectrum.zsh
        zgen load robbyrussell/oh-my-zsh plugins/colored-man-pages/colored-man-pages.plugin.zsh
    fi
    zgen load zsh-users/zsh-syntax-highlighting
    zgen load zsh-users/zsh-autosuggestions
    zgen save
fi
