# Get directory that this script resides in.
# <http://unix.stackexchange.com/a/136565/146303>
zshrc_dir="${0:a:h}"

fpath=(${zshrc_dir}/functions ${fpath})

# Available configurations; set from ~/.zshrc_before.
# TODO(achald): Make this an associative array.
CONFIG_256_COLORS=${CONFIG_256_COLORS:-1}
# Create .use_light_colors file to use light colors; this can be done by calling
# `light_colors` and `dark_colors` functions (defined in ./prompt).
if [[ -e "${zshrc_dir}"/.use_light_colors ]] ; then
    export CONFIG_LIGHT_COLORS=1
else
    export CONFIG_LIGHT_COLORS=0
fi

# Setup completion. This needs to happen before zgen is sourced.
autoload -Uz compinit
compinit

# Helper for working with json
source scripts/pyjson.zsh

# For colors
source scripts/spectrum.zsh

# turn on correction
setopt correctall

if [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ||
   [[ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]] ; then
    # Git file completion is super slow on Windows; this should fix it
    # http://stackoverflow.com/questions/9810327/
    __git_files () {
        _wanted files expl 'local files' _files
    }
fi

zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' max-errors 3
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]} r:|[._-]=** r:|=**' 'r:[^A-Z0-9]||[A-Z0-9]=** r:|=*'

# 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} l:|=* r:|=*'
zstyle :compinstall filename '/Users/achal/.zshrc'
zstyle ':completion:*' menu select=2

# Key mappings

# Vim
# When I hit <kj>, I want to stay at my current position (that is, if I hit
# <i> right after, I want to be at the same place). By default, Vim would
# move you one to the left. This does the same thing as:
#   nnoremap kj <Esc>l
# This function takes care of doing this, and 'kj' is later bound to it.
function vi-cmd-mode-forward-fn { zle vi-cmd-mode ; zle vi-forward-char }
zle -N vi-cmd-mode-forward vi-cmd-mode-forward-fn

bindkey -e
KEYTIMEOUT=15
autoload edit-command-line
zle -N edit-command-line
bindkey '^E' edit-command-line
bindkey -M emacs 'kj' vi-cmd-mode-forward # See comment above vi-cmd-mode-forward-fn.
bindkey -M emacs '^R' history-incremental-search-backward
bindkey -M vicmd 'u' undo
bindkey -M vicmd '^R' redo
bindkey -M vicmd ':' vi-repeat-find
bindkey -M vicmd ';' execute-named-cmd
# I have yet to figure out how to exit from "search mode", which is activated by
# / and ?, so it's safer just to unbind them, given I never use "search mode".
bindkey -r -M vicmd '/'
bindkey -r -M vicmd '?'


# Save command to history, start new prompt with current command
function add-to-history() { print -s -r -- "${PREBUFFER}${BUFFER}" ; }
zle -N add-to-history
bindkey '^x' add-to-history

# # See http://www.zsh.org/mla/users/2009/msg00812.html.
# # Otherwise you can't backspace things you didn't just insert.
bindkey "^W" backward-kill-word    # was vi-backward-kill-word
bindkey "^H" backward-delete-char  # was vi-backward-delete-char
bindkey "^U" kill-line             # was vi-kill-line
bindkey "^?" backward-delete-char  # was vi-backward-delete-char

# Bash style word selection (e.g. ctrl-w should kill backwards up to a slash)
autoload -U select-word-style
select-word-style bash

bindkey "[A" history-beginning-search-backward-end
bindkey "[B" history-beginning-search-forward-end
bindkey -M vicmd 'k' history-beginning-search-backward-end
bindkey -M vicmd 'j' history-beginning-search-forward-end

LINE='\E]50;CursorShape=1\x7' # Line Cursor
BLOCK='\E]50;CursorShape=0\x7' # Block Cursor

print-ins () {
    if [[ -n "$TMUX" ]] ; then
        print -n -- "\EPtmux;\E$LINE\E\\"
    else
        print -n -- $LINE
    fi
}

print-cmd () {
    if [[ -n "$TMUX" ]] ; then
        print -n -- "\EPtmux;\E$BLOCK\E\\"
    else
        print -n -- $BLOCK
    fi
}

function zle-line-init zle-keymap-select {
    if [[ "$KEYMAP" == 'vicmd' ]] ; then
        print-cmd
    else
        print-ins
    fi
    zle reset-prompt
    zle -R
}
zle -N zle-line-init
zle -N zle-keymap-select

# history
HISTFILE=~/.zsh_hist
HISTSIZE=10000000
SAVEHIST=10000000
# Write to the history file immediately, not when the shell exits.
setopt INC_APPEND_HISTORY
# Write the history file in the ":start:elapsed;command" format.
setopt EXTENDED_HISTORY
# Expire duplicate entries first when trimming history.
setopt HIST_EXPIRE_DUPS_FIRST
# Don't execute immediately upon history expansion.
setopt HIST_VERIFY

# please don't beep
unsetopt beep

# Changing/making/removing directory
setopt autocd extendedglob
# Removing because of issue with autojump:
#   https://github.com/joelthelion/autojump/issues/312
# setopt auto_name_dirs
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus

# laziness
# colors!
if [[ `uname` == "Darwin" ]] && ! ls --version | grep -q 'GNU'
then
    alias ls='ls -G'
elif [[ `uname` == "Darwin" ]] || # Darwin with GNU ls
     [[ `uname` == "Linux" ]] ||
     [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]] ||
     [[ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]]
then
    alias ls='ls --color=always -p'
fi

alias c='cd'
alias grep='grep --color=tty'
alias l='ls'
alias la='ls -A'
alias ll='ls -Alhp'
alias g='git'
alias py='python'
alias ipy='ipython'
alias ptpy='ptpython'
alias ptipy='ptipython'
alias so='source'
function sa () {
    if [[ "$#" < 1 || ("$1" != "-f" && "$1" != "--force" ) ]] ; then
        if [ -n "$SSH_AUTH_SOCK" ] ; then
            echo "You already seem to have an SSH agent running."
            echo "Pass [-f|--force] to override this."
            return 1
        fi
    fi
    eval `ssh-agent`
    ssh-add
}

function fixenv() {
    eval $(tmux showenv -s DISPLAY)
    eval $(tmux showenv -s SSH_AUTH_SOCK)
}

# directory laziness
alias ..='cd ..'
alias cd..='cd ..'
alias cd...='cd ../..'
alias cd....='cd ../../..'
alias cd.....='cd ../../../..'
alias cd/='cd /'

# safety
setopt noclobber
alias cp='cp -i'
alias mv='mv -i'

# prompt and colors
autoload -Uz vcs_info
autoload -U colors && colors

precmd() { vcs_info }

setopt prompt_subst

if [[ "$TERM" == "screen" ]] ; then
    export TERM=screen-256color-bce
fi

# load any specific dircolors if necessary
if [[ -e "${zshrc_dir}/../dircolors/dircolors" ]] ; then
    eval "$(dircolors ${zshrc_dir}/../dircolors/dircolors)"
fi

if [[ -e ~/.dircolors ]] ; then
    eval "$(dircolors ~/.dircolors)"
fi

# FIX FOR ZSH HISTORY CURSOR
# This should work exactly as bash's history-search-[back|for]ward:
#   i.e. if you have an empty line and hit <Up>, your cursor will go to the end
#   of line if you have some letters and hit <Up>, your cursor will stay where
#   it was and zsh will fill the rest of the line with the history search.
#
# Much of this function taken from http://www.zsh.org/mla/users/1999/msg00555.html
function history-search-end {
    integer ocursor=$CURSOR

    if [[ $LASTWIDGET = history-beginning-search-*-end ]]; then
      # Last widget called set $hbs_pos.
      CURSOR=$hbs_pos
    else
      hbs_pos=$CURSOR
    fi

    if zle .${WIDGET%-end}; then
      # if we started at front, go to end of line
      if [ $CURSOR -eq 0 ] ; then
          zle .end-of-line
      else
          # otherwise, keep cursor where it was
          CURSOR=$hbs_pos
      fi
    else
      # failure, restore position
      CURSOR=$ocursor
      return 1
    fi
}
autoload -U history-beginning-search-backward-end
autoload -U history-beginning-search-forward-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

# better diff (TODO: share this with bash)
function color_diff() {
    sed 's/^-/\x1b[31m-/;s/^+/\x1b[32m+/;s/^@/\x1b[34m@/;s/$/\x1b[0m/' | less -RFX
}

function dff() {
    diff -u "$@" | color_diff
}


# Useful functions

# swap two files (not directories!)
function swap() {
    if [[ "$#" -lt 2 ]] || [[ ! -f "$1" ]] || [[ ! -f "$2" ]]; then
        if [[ -d "$1" ]] || [[ -d "$2" ]] ; then
            echo "You can't swap two directories right now."
        else
            echo "swap [file1] [file2]"
        fi
        return 1
    fi

    mydir=$(dirname "$1");
    if type mktemp > /dev/null ; then
        tmpfile=$(mktemp "$mydir"/XXXXXX)
    else
        tmpfile="/tmp/$mydir"
    fi

    mv -f "$1" "$tmpfile"
    mv "$2" "$1"
    mv "$tmpfile" "$2"
}

# Go up k times
function up() {
    if [[ "$#" > 1 ]] ; then
        echo "Usage: up [num_directories]"
        return 1
    fi
    num_up=1
    if [[ "$#" == 1 ]] ; then
        num_up="$1"
    fi
    # We could cd .. multiple times, but this pollutes the directory stack.
    dir_path=''
    for i in $(seq ${num_up}) ; do
        dir_path="../${dir_path}"
    done
    command="cd $dir_path"
    echo ${command}
    eval ${command}
}

# Usage:
#   echo -n "1\n2" | sum
function sum() {
    paste -sd+ - | bc
}

function cd() {
    # If first argument is a file, cd to the directory containing the file.
    if [[ -a "$1" ]] && [[ ! -d "$1" ]] ; then
        builtin cd $(dirname $1) ${@:2}
    else
        builtin cd $@
    fi
}

function msg() {
    msg=$(echo "$*" | sed -e 's/ /    /g')
    figlet -w ${COLUMNS} ${msg} | less
}

# Useful for creating files with a readable, spaceless date. E.g.
#   echo "Need to rerun these models: foo/bar, foo/baz" > README_$(now).txt
alias now="date +'%m-%d-%y_%H:%M:%S'"

if command -v bat >/dev/null 2>&1 ; then
    BAT_PATH=$(which bat)
    function bat() {
        if [ -t 1 ] ; then
            $BAT_PATH --color always --style full --paging never $* \
                | less --tabs 4 -RF
        else
            $BAT_PATH $*
        fi
    }
fi

###############
### PLUGINS ###
###############

# Load zgen.
export ZGEN_DIR="${zshrc_dir}/.zgen"
if ! where zgen >/dev/null; then
    # Temporary hack due to
    # https://github.com/zsh-users/zsh-autosuggestions/pull/150
    source zgen/zgen.zsh
fi

# If the init scipt doesn't exist, generate the init script.
if ! zgen saved; then
    if [ "$has_256" -eq 1 ] ; then
        zgen load robbyrussell/oh-my-zsh lib/spectrum.zsh
        zgen load robbyrussell/oh-my-zsh plugins/colored-man-pages/colored-man-pages.plugin.zsh
    fi
    zgen load robbyrussell/oh-my-zsh plugins/shrink-path/shrink-path.plugin.zsh
    zgen load zsh-users/zsh-autosuggestions
    zgen load denysdovhan/spaceship-prompt spaceship
    # zgen save is run at the end of this file.
fi

source prompt

if ! zgen saved ; then
    # This needs to be done at the end of the zshrc: zsh-syntax-highlighting
    # need to be sourced after all 'custom widgets have been created (i.e.,
    # after all `zle -N` calls and after running `compinit`)'.
    # Strange things happen if you don't do this, such as
    # https://github.com/zsh-users/zsh-syntax-highlighting/issues/67
    zgen load zsh-users/zsh-syntax-highlighting
    zgen save
fi

# FZF settings
# Use ~~ as the trigger sequence instead of the default **
export FZF_COMPLETION_TRIGGER='~~'
export FZF_DEFAULT_OPTS='--bind ctrl-o:toggle-preview'

# Use FZF with fd
if command -v fd >/dev/null ; then
    # Use fd (https://github.com/sharkdp/fd) instead of the default find
    # command for listing path candidates.
    # - The first argument to the function ($1) is the base path to start traversal
    # - See the source code (completion.{bash,zsh}) for the details.
    _fzf_compgen_path() {
        FD_ARGS="--hidden --follow --exclude '.git' . $1"
        if [ -n "${fd_depth}" ] ; then
            FD_ARGS="--max-depth ${fd_depth} ${FD_ARGS}"
        fi
        fd ${=FD_ARGS}
    }

    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
        FD_ARGS="--type d --hidden --follow --exclude '.git' . $1"
        if [ -n "${fd_depth}" ] ; then
            FD_ARGS="--max-depth ${fd_depth} ${FD_ARGS}"
        fi
        fd ${=FD_ARGS}
    }
fi

# Use Ctrl-N to get a depth 1 completion.
# TODO(achald): Overwrite the tab completion and use triggers to depth 1
# completion. The problem is that fzf-completion does a lot of internal stuff I
# don't want to copy here.
fzf-completion-depth-1() {
    eval "fd_depth=1 fzf-completion"
}
zle     -N   fzf-completion-depth-1
bindkey '^N' fzf-completion-depth-1

# Create a preview window that shows multiline commands.
# The sed commands are a magic incantation that I arrived at via trial and
# error. It turns out you need *8* backslashes for escaping magic
# to end up being able to replace a single backslash. I assume there is an
# easier way to do this, but this worked...
# The first sed command replaces "\\n" with a "\" and a new line, unless the
# preceding character is a backslash. This is for multi-line zsh commands with
# a backslash at the end. E.g.:
#   python do.py \
#       --args hello
# which gets converted into "python do.py \\n--args hello" in the history.
#
# The second command replaces "\n" with a new line, unless the preceding
# character is a backslash. This is for implicitly multi-line zsh commands:
#   for i in {1..10} ; do
#       echo ${i}
#   done
# which gets converted into "for i in {1..10} ; do\n echo ${i}\n done"
export FZF_CTRL_R_OPTS="--height 100% --preview 'echo -E {} \
    | sed -r -e \"s/([^\])\\\\\\\\\\\\\\\n/\1\\\\\\\\\n/g\" \
    | sed -r -e \"s/([^\])\\\\\\\\n/\1\n/g\" \
    | fold -w "'${COLUMNS}'" \
    | (pygmentize -l zsh || cat)' \
    --preview-window bottom:80%:hidden"

# function _fzf_complete_ls() {
#     i=0
#     # $prefix and $trigger are set by the caller. $prefix is the path up to the
#     # $trigger, and $trigger should be the FZF_COMPLETION_TRIGGER.
#     echo ${prefix}
#     echo ${trigger}
#     for arg in "$@"; do
#         echo "$i: $var"
#         ((i++))
#     done
# }

# autosuggestions settings
# Use ^F to accept autosuggestion, like in fish. We could use
# autosuggest-accept, but this moves the cursor to the end, which I usually
# don't want.
bindkey '^f' history-beginning-search-backward-end
# Gray; looks good for light and dark colorschemes
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=244'

# I'm terrified of passing the wrong command to fc and wiping my history, so use
# a helper function instead.
function loadhist() {
    fc -R
}

export PATH=""`pwd`"/../git/scripts:$PATH"
